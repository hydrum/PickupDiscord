plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'de.gost0r.pickupbot'
version = '1.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('sentryVersion', "8.16.0")
}

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'io.sentry:sentry-spring-boot-starter-jakarta'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'io.sentry:sentry:8.16.0'
    implementation 'commons-io:commons-io:2.19.0'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'jakarta.websocket:jakarta.websocket-api:2.2.0'
    implementation 'org.json:json:20250517'
    implementation 'org.xerial:sqlite-jdbc:3.50.2.0'
    implementation 'org.glassfish.tyrus.bundles:tyrus-standalone-client:2.2.0'
    implementation 'io.github.cdimascio:dotenv-java:3.2.0'
}

dependencyManagement {
    imports {
        mavenBom "io.sentry:sentry-bom:${sentryVersion}"
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': 'de.gost0r.pickupbot.PickupBotDiscordMain'
    }
    destinationDirectory.set(file("$rootDir/"))
    archiveBaseName = 'PickupBot'
    archiveVersion = ''
    archiveClassifier = ''

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
